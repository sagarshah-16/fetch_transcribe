name: Deploy to SSH Server

on:
  push:
    branches:
      - master  # or main, depending on your default branch name

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Use your specific Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Create deployment script
          echo "Deploying to $SSH_USER@$SERVER_IP:$DEPLOY_PATH"

          # Create deployment directory if it doesn't exist
          ssh $SSH_USER@$SERVER_IP "mkdir -p $DEPLOY_PATH"

          # Copy project files to server
          rsync -avz --exclude '.git' --exclude '.github' --exclude '__pycache__' \
            --exclude 'venv' --exclude '.env' ./ $SSH_USER@$SERVER_IP:$DEPLOY_PATH

          # Set up environment on server if needed
          ssh $SSH_USER@$SERVER_IP "cd $DEPLOY_PATH && \
            python -m pip install --upgrade pip && \
            pip install -r requirements.txt"

          # Optional: Restart service if needed
          # ssh $SSH_USER@$SERVER_IP "systemctl restart your-service.service || supervisorctl restart your-program"

          echo "Deployment completed successfully!"